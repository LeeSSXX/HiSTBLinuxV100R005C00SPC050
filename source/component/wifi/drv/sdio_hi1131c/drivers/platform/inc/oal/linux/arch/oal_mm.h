/******************************************************************************

                  版权所有 (C), 2001-2011, 海思半导体有限公司

 ******************************************************************************
  文 件 名   : oal_mm.h
  版 本 号   : 初稿
  作    者   : 
  生成日期   : 2012年12月10日
  最近修改   :
  功能描述   : oal_mm.h 的头文件
  函数列表   :
  修改历史   :
  1.日    期   : 2012年12月10日
    作    者   : 
    修改内容   : 创建文件

******************************************************************************/

#ifndef __OAL_LINUX_MM_H__
#define __OAL_LINUX_MM_H__

#ifdef __cplusplus
#if __cplusplus
extern "C" {
#endif
#endif


/*****************************************************************************
  1 其他头文件包含
*****************************************************************************/
/*lint -e322*/
#include <linux/slab.h>
#include <linux/hardirq.h>
#include <linux/vmalloc.h>
/*lint +e322*/

/*****************************************************************************
  2 宏定义
*****************************************************************************/
#define OAL_MEMCMP                                  memcmp
#define OAL_CONST                                   const

#define OAL_GFP_KERNEL                          GFP_KERNEL
#define OAL_GFP_ATOMIC                          GFP_ATOMIC

/*****************************************************************************
  3 枚举定义
*****************************************************************************/


/*****************************************************************************
  4 全局变量声明
*****************************************************************************/


/*****************************************************************************
  5 消息头定义
*****************************************************************************/


/*****************************************************************************
  6 消息定义
*****************************************************************************/


/*****************************************************************************
  7 STRUCT定义
*****************************************************************************/


/*****************************************************************************
  8 UNION定义
*****************************************************************************/


/*****************************************************************************
  9 OTHERS定义
*****************************************************************************/


/*****************************************************************************
  10 函数声明
*****************************************************************************/
/*****************************************************************************
 函 数 名  : oal_memalloc
 功能描述  : 申请核心态的内存空间，并填充0。对于Linux操作系统而言，
             需要考虑中断上下文和内核上下文的不同情况(GFP_KERNEL和GFP_ATOMIC)。
 输入参数  : ul_size: alloc mem size
 输出参数  : 无
 返 回 值  : alloc mem addr
 调用函数  :
 被调函数  :

 修改历史      :
  1.日    期   : 2012年9月17日
    作    者   : 
    修改内容   : 新生成函数

*****************************************************************************/
OAL_STATIC OAL_INLINE oal_void* oal_memalloc(oal_uint32 ul_size)
{
    oal_int32   l_flags = GFP_KERNEL;
    oal_void   *puc_mem_space;

    /* 不睡眠或在中断程序中标志置为GFP_ATOMIC */
    if (in_interrupt() || irqs_disabled())
    {
        l_flags = GFP_ATOMIC;
    }

    puc_mem_space = kmalloc(ul_size, l_flags);

    if (OAL_PTR_NULL == puc_mem_space)
    {
        return OAL_PTR_NULL;
    }

    return puc_mem_space;
}




OAL_STATIC OAL_INLINE oal_void*  oal_kzalloc(oal_uint32 ul_size,oal_int32 l_flags)
{
    return kzalloc(ul_size, l_flags);
}

OAL_STATIC OAL_INLINE oal_void*  oal_vmalloc(oal_uint32 ul_size)
{
    return vmalloc(ul_size);
}

/*****************************************************************************
 函 数 名  : oal_free
 功能描述  : 释放核心态的内存空间。
 输入参数  : pbuf:需释放的内存地址
 输出参数  : 无
 返 回 值  :
 调用函数  :
 被调函数  :

 修改历史      :
  1.日    期   : 2012年9月17日
    作    者   : 
    修改内容   : 新生成函数

*****************************************************************************/
OAL_STATIC OAL_INLINE oal_void  oal_free(oal_void *p_buf)
{
    kfree(p_buf);
}

OAL_STATIC OAL_INLINE oal_void  oal_vfree(oal_void *p_buf)
{
    vfree(p_buf);
}

/*****************************************************************************
 函 数 名  : oal_memcopy
 功能描述  : 复制内存。不允许两块内存重叠。
 输入参数  : *p_dst: 内存复制目的地址
             *p_src: 内存复制源地址
             ul_size: 复制内存大小
 输出参数  : 无
 返 回 值  :
 调用函数  :
 被调函数  :

 修改历史      :
  1.日    期   : 2012年9月18日
    作    者   : 
    修改内容   : 新生成函数

*****************************************************************************/
OAL_STATIC OAL_INLINE oal_void oal_memcopy(oal_void *p_dst, const oal_void *p_src, oal_uint32 ul_size)
{
    memcpy(p_dst, p_src, ul_size);
}

/*****************************************************************************
 函 数 名  : oal_memmove
 功能描述  : 复制内存。允许两块内存重叠。
 输入参数  : *p_dst: mem move destination addr
             *p_src: mem move source addr
             ul_size: mem move size
 输出参数  : 无
 返 回 值  :
 调用函数  :
 被调函数  :

 修改历史      :
  1.日    期   : 2012年9月18日
    作    者   : 
    修改内容   : 新生成函数

*****************************************************************************/
OAL_STATIC OAL_INLINE oal_void  oal_memmove(oal_void *p_dst, const oal_void *p_src, oal_uint32 ul_size)
{
    memmove(p_dst, p_src, ul_size);
}

/*****************************************************************************
 函 数 名  : oal_memset
 功能描述  : 内存填充。
 输入参数  : *p_buf
             uc_char: char be set to mem
             ul_size: size of mem be set
 输出参数  : 无
 返 回 值  :
 调用函数  :
 被调函数  :

 修改历史      :
  1.日    期   : 2012年9月18日
    作    者   : 
    修改内容   : 新生成函数

*****************************************************************************/
OAL_STATIC OAL_INLINE oal_void  oal_memset(oal_void *p_buf, oal_int32 l_data, oal_uint32 ul_size)
{
    memset(p_buf, l_data, ul_size);
}


/*****************************************************************************
 函 数 名  : oal_memcmp
 功能描述  : compare memory areas
 输入参数  : 无
 输出参数  : 无
 返 回 值  :
 调用函数  :
 被调函数  :

 修改历史      :
  1.日    期   : 2013年6月7日
    作    者   : 
    修改内容   : 新生成函数

*****************************************************************************/
OAL_STATIC OAL_INLINE oal_int  oal_memcmp(OAL_CONST oal_void *p_buf1, OAL_CONST oal_void *p_buf2, oal_uint32 ul_count)
{
    return memcmp(p_buf1, p_buf2, ul_count);
}


#ifdef __cplusplus
    #if __cplusplus
        }
    #endif
#endif

#endif /* end of oal_mm.h */

